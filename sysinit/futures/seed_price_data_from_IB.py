from syscore.exceptions import missingData
from sysbrokers.IB.ib_futures_contract_price_data import (
    futuresContract,
)
from syscore.dateutils import DAILY_PRICE_FREQ, HOURLY_FREQ, Frequency
from sysdata.data_blob import dataBlob

from sysproduction.data.broker import dataBroker
from sysproduction.data.prices import updatePrices
from sysproduction.update_historical_prices import write_merged_prices_for_contract


def seed_price_data_from_IB(instrument_code, allow_expired=True):
    data = dataBlob()
    data_broker = dataBroker(data)

    list_of_contracts = data_broker.get_list_of_contract_dates_for_instrument_code(
        instrument_code, allow_expired=True
    )
    print(f"List of contracts ({allow_expired=}): {list_of_contracts}")

    ## This returns yyyymmdd strings, where we have the actual expiry date

    for contract_date in list_of_contracts:
        ## We do this slightly tortuous thing because there are energy contracts
        ## which don't expire in the month they are labelled with
        ## So for example, CRUDE_W 202106 actually expires on 20210528

        date_str = contract_date[:6]
        contract_object = futuresContract(instrument_code, date_str)

        seed_price_data_for_contract(data=data, contract_object=contract_object)


def seed_price_data_for_contract(data: dataBlob, contract_object: futuresContract):
    log_attrs = {**contract_object.log_attributes(), "method": "temp"}

    list_of_frequencies = [HOURLY_FREQ, DAILY_PRICE_FREQ]
    for frequency in list_of_frequencies:
        data.log.debug("Getting data at frequency %s" % str(frequency), **log_attrs)
        seed_price_data_for_contract_at_frequency(
            data=data, contract_object=contract_object, frequency=frequency
        )

    data.log.debug("Writing merged data for %s" % str(contract_object), **log_attrs)
    write_merged_prices_for_contract(
        data, contract_object=contract_object, list_of_frequencies=list_of_frequencies
    )


def seed_price_data_for_contract_at_frequency(
    data: dataBlob, contract_object: futuresContract, frequency: Frequency
):
    data_broker = dataBroker(data)
    update_prices = updatePrices(data)
    log_attrs = {**contract_object.log_attributes(), "method": "temp"}

    try:
        prices = (
            data_broker.get_prices_at_frequency_for_potentially_expired_contract_object(
                contract_object, frequency=frequency
            )
        )
    except missingData:
        data.log.warning(
            "Error getting data for %s" % str(contract_object),
            **log_attrs,
        )
        return None

    data.log.debug(
        "Got %d lines of prices for %s" % (len(prices), str(contract_object)),
        **log_attrs,
    )

    if len(prices) == 0:
        data.log.warning(
            "No price data for %s" % str(contract_object),
            **log_attrs,
        )
    else:
        update_prices.overwrite_prices_at_frequency_for_contract(
            contract_object=contract_object, frequency=frequency, new_prices=prices
        )


def get_instr_list():
    # full list of instruments
    # - minus those already in FSB system
    # - minus those in Caleb system
    instr_list = [
        "30YRCONF",
        "30YRJUMBO",
        "ALUMINIUM",
        "AMERIBOR-1M",
        "AMERIBOR-3M",
        "AMERIBOR-T30",
        "AMX",
        "ATX",
        "AUDCAD",
        "AUDJPY",
        "AUDJPY-SGX",
        "AUSCASH",
        "BARLEY",
        "BB3M",
        "BBCOMM",
        "BEL20",
        "BONO",
        "BONO-MEFF",
        "BONO10",
        "BONO3",
        "BOVESPA",
        "BOVESPA-HK",
        "BRE",
        "BRENT",
        "BRENT-LAST",
        "BRR",
        "BRREUR",
        "BTP5",
        "BUTTER",
        "CAD10",
        "CAD2",
        "CAD5",
        "CADJPY",
        "CADJPY2",
        "CADSTIR",
        "CAN-ENERGY",
        "CAN-FINANCE",
        "CAN-GOLD",
        "CAN-TECH",
        "CANNABIS_small",
        "CETES",
        "CH10",
        "CHEESE",
        "CHINA120",
        "CHINAA-CON",
        "CLP",
        "CNH",
        "CNH-CME",
        "CNH-CME_micro",
        "CNH-HK",
        "CNH-onshore",
        "CNHEUR",
        "COAL",
        "COAL-GEORDIE",
        "COAL-RICH-BAY",
        "CORRA",
        "COTTON",
        "CRUDE_ICE",
        "CRYPTO_small",
        "CZK",
        "DIVDAX",
        "DIVDAX-DIVI",
        "DIVDAX-DIVI2",
        "DJSTX-SMALL",
        "DJUBS",
        "DOW_YEN",
        "EPRA-EURO",
        "ETHANOL",
        "ETHER-micro",
        "ETHRREUR",
        "EU-AUTO",
        "EU-BANKS",
        "EU-BANKS-DIVI",
        "EU-BANKS2",
        "EU-BASIC",
        "EU-CHEM",
        "EU-CONSTRUCTION",
        "EU-DIV30",
        "EU-DIV30-DVP",
        "EU-DIV50",
        "EU-ESG",
        "EU-FINANCE",
        "EU-FOOD",
        "EU-HEALTH",
        "EU-HOUSE",
        "EU-INSURE",
        "EU-MEDIA",
        "EU-MID",
        "EU-OIL",
        "EU-REALESTATE",
        "EU-RETAIL",
        "EU-TECH",
        "EU-TELECOM",
        "EU-TRAVEL",
        "EU-UTILS",
        "EUIRS10",
        "EUIRS2",
        "EUIRS5",
        "EURAUD",
        "EURCZK",
        "EURHUF",
        "EURINR",
        "EURMXP",
        "EURO600",
        "EURO600-ESG",
        "EUROFIRST100",
        "EUROFIRST80",
        "EUROSTX-CORE",
        "EUROSTX-DJ",
        "EUROSTX-PRICE",
        "EUROSTX-SMALL",
        "FANG",
        "FTSE100-DIV",
        "FTSEAFRICA40",
        "FTSECHINAA",
        "FTSECHINAA-CSOP",
        "FTSECHINAA-IS",
        "FTSEINDO",
        "FTSETAIWAN",
        "FTSEVIET",
        "GAS-PEN",
        "GBPINR",
        "GBPJPY",
        "GBPJPY-ICE",
        "GICS",
        "GICS-EXCESS",
        "GILT2",
        "GILT5",
        "HANG-DIV",
        "HANGTECH",
        "HANGENT_mini",
        "HANGENT-GTR",
        "HANGENT-NTR",
        "HEAT-DEG-AMS",
        "HEAT-DEG-LON",
        "HEAT-DEG-NY",
        "HIBOR",
        "HIGHYIELD",
        "HOUSE-BO",
        "HOUSE-CG",
        "HOUSE-DC",
        "HOUSE-DN",
        "HOUSE-LA",
        "HOUSE-LV",
        "HOUSE-MI",
        "HOUSE-NY",
        "HOUSE-SD",
        "HOUSE-SF",
        "HOUSE-US",
        "HSCEI-DIV",
        "HUF",
        "HUFEUR",
        "IG",
        "IND-BANK",
        "IND-FIN",
        "INR",
        "IPC",
        "IRON",
        "IRON-CME",
        "IRON-HK",
        "IRS",
        "JP-REALESTATE",
        "JPY-SGX-TITAN",
        "JPYINR",
        "KOSDAQ",
        "KOSPI_mini",
        "KOSPI300",
        "KR10",
        "KR3",
        "KRW",
        "KRWJPY",
        "KRWUSD_mini",
        "LEAD_LME",
        "LIBOR1",
        "MARS-ARGUS",
        "MIB",
        "MIB_micro",
        "MIB_mini",
        "MIB-DIVI",
        "MID-DAX",
        "MILKDRY",
        "MILKWET",
        "MILLWHEAT",
        "MSCIASIA",
        "MSCIASIAEXJP",
        "MSCIBRAZIL",
        "MSCICHINA",
        "MSCICHINANET",
        "MSCIEAFA",
        "MSCIEAFA-TOT",
        "MSCIEM",
        "MSCIEM-LIFFE",
        "MSCIEMASIA",
        "MSCIEURONET",
        "MSCIEURONET-ICE",
        "MSCIEUROPE",
        "MSCIEUROPE-ICE",
        "MSCIEUROPE-LIFFE",
        "MSCIINDO",
        "MSCIJAPAN",
        "MSCIJAPAN-LIFFE",
        "MSCILATIN",
        "MSCIPACIFIC",
        "MSCIPANEURO-LIFFE",
        "MSCIRUSSIA",
        "MSCITAIWAN",
        "MSCIUSA",
        "MSCIWORLD",
        "MSCIWORLD-MINVOL",
        "MSCIWORLDNET-EUR",
        "MSCIWORLDNET-ICE",
        "MSCIWORLDNET-USD",
        "MUMMY",
        "NASBIO-mini",
        "NICKEL_LME",
        "NIFTY",
        "NIFTY-IN",
        "NIKKEI400",
        "OAT5",
        "OMX",
        "OMX-SWE",
        "OMXESG",
        "OMXSB",
        "PIPELINE",
        "PLN",
        "PLZEUR",
        "PRECIOUS_small",
        "R1000",
        "R1000_mini",
        "R1000GROWTH-mini",
        "RAPESEED",
        "RUBBER",
        "RUBBER-RSS",
        "RUR",
        "RUSSELL-GROWTH",
        "RUSSELL-VALUE",
        "SARONA",
        "SGX",
        "SING-REALESTATE",
        "SMALL75",
        "SMI-DIV",
        "SMI-MID",
        "SMIETF",
        "SOFR1",
        "SONIA",
        "SONIA1",
        "SP500-GROWTH",
        "SP500-VALUE",
        "SP600-SMALL",
        "SPI200",
        "SS-AIA-GROUP",
        "SS-ALIBABA-HLDS",
        "SS-ASML",
        "SS-ASS-GEN",
        "SS-BAIDU",
        "SS-BANK-CHINA",
        "SS-BOC-HONG-KONG",
        "SS-BUDWEISER-BREWING",
        "SS-BYD-CO",
        "SS-CHINA-CONSTR-BK",
        "SS-CHINA-MERCH-BANK",
        "SS-CHINA-MOBILE",
        "SS-CHINA-UNICOM-HK",
        "SS-CITIC-LTD",
        "SS-CK-HUTCHISON",
        "SS-CLP-HOLDINGS",
        "SS-CNOOC",
        "SS-DTE",
        "SS-ENEL-SPA",
        "SS-HDFC",
        "SS-HEINK",
        "SS-HIND-UNILV",
        "SS-HK-CHINA-GAS",
        "SS-HK-EXCH-CLEAR",
        "SS-HOUS-DEV-FIN",
        "SS-HSBC-HLDS",
        "SS-IBERDROLA",
        "SS-IND-COMM-BK-OF-CHINA",
        "SS-IND-DIS-TEXT",
        "SS-INFOSYS",
        "SS-JD-COM",
        "SS-KOTAK-BANK",
        "SS-LOREAL",
        "SS-MEITUAN-B",
        "SS-NETEASE",
        "SS-NONGFU",
        "SS-OVERSEA-CH-BK",
        "SS-PING-AN-INSURANCE",
        "SS-POWER-ASSETS-HLDS",
        "SS-RELIANCE",
        "SS-ROCHE",
        "SS-SING-TEL",
        "SS-SUN-HUNG-KAI",
        "SS-TATA",
        "SS-TENCENT-HLDS",
        "SS-THAI-BEV",
        "SS-TOTAL-ENERGIES",
        "SS-UNICREDIT-SPA",
        "SS-VW",
        "SS-WHARF-HLDS",
        "SS-WUXI-BIOLOGICS",
        "SS-XIAOMI",
        "SS-YES-BANK",
        "SS-ZUR-INSR",
        "STEEL",
        "SUGAR16",
        "SWISSLEAD",
        "TECDAX",
        "TECH60_small",
        "THB",
        "TIN_LME",
        "TOPIX_Large",
        "TOPIX30",
        "TSE60",
        "TSX",
        "TWD",
        "UMBS-20",
        "UMBS-25",
        "UMBS-30",
        "UMBS-35",
        "UMBS-40",
        "UMBS-45",
        "UMBS-50",
        "URANIUM",
        "US10U",
        "US10Y_micro",
        "US10Y_small",
        "US20",
        "US20-new",
        "US2Y_micro",
        "US2Y_small",
        "US3",
        "US5Y_micro",
        "USD_small",
        "USDCAD_micro",
        "USDCHF_micro",
        "USDCNH-CME",
        "USDCNH-HK",
        "USDCNH-SGX_mini",
        "USDINR",
        "USDKRW",
        "USDMXP",
        "USIRS10",
        "USIRS10_ICE",
        "USIRS10ERIS",
        "USIRS12ERIS",
        "USIRS15ERIS",
        "USIRS2",
        "USIRS2_ICE",
        "USIRS20ERIS",
        "USIRS2ERIS",
        "USIRS30",
        "USIRS3ERIS",
        "USIRS4ERIS",
        "USIRS5",
        "USIRS5_ICE",
        "USIRS5ERIS",
        "USIRS5ERIS_SOFR",
        "USIRS7ERIS",
        "VHANG",
        "VNKI",
        "VOLQ",
        "WATER-CALI",
        "WHEAT-ASX",
        "WHEY",
        "WTI_small",
        "YENEUR",
        "YENEUR-ICE",
        "ZINC_LME",
    ]
    return instr_list


def get_instr_list2():
    # list of instruments from get_instr_list()
    # - minus those from Rob's Remove Markets report
    # - minus those described as untradeable for Rob in the docs
    instr_list = [
        "30YRCONF",
        "30YRJUMBO",
        "ALUMINIUM",
        "AMERIBOR-1M",
        "AMERIBOR-3M",
        "AMERIBOR-T30",
        "AMX",
        "ATX",
        "AUDCAD",
        "AUDJPY",
        "AUDJPY-SGX",
        "AUSCASH",
        "BARLEY",
        "BEL20",
        "BONO-MEFF",
        "BONO10",
        "BONO3",
        "BOVESPA-HK",
        "BRE",
        "BRENT",
        "BRENT-LAST",
        "BRR",
        "BRREUR",
        "BTP5",
        "CAD10",
        "CADJPY",
        "CADJPY2",
        "CADSTIR",
        "CAN-ENERGY",
        "CAN-FINANCE",
        "CAN-GOLD",
        "CAN-TECH",
        "CANNABIS_small",
        "CETES",
        "CHINA120",
        "CHINAA-CON",
        "CNH-CME",
        "CNH-CME_micro",
        "CNH-HK",
        "CNHEUR",
        "COAL-RICH-BAY",
        "CORRA",
        "CRUDE_ICE",
        "CRYPTO_small",
        "DIVDAX",
        "DIVDAX-DIVI",
        "DIVDAX-DIVI2",
        "DJUBS",
        "DOW_YEN",
        "EPRA-EURO",
        "ETHANOL",
        "ETHER-micro",
        "ETHRREUR",
        "EU-AUTO",
        "EU-BANKS",
        "EU-BANKS-DIVI",
        "EU-BANKS2",
        "EU-BASIC",
        "EU-DIV30",
        "EU-DIV30-DVP",
        "EU-DIV50",
        "EU-ESG",
        "EU-FINANCE",
        "EU-FOOD",
        "EU-HEALTH",
        "EU-OIL",
        "EU-REALESTATE",
        "EU-TECH",
        "EU-TELECOM",
        "EU-UTILS",
        "EUIRS10",
        "EUIRS2",
        "EUIRS5",
        "EURCZK",
        "EURHUF",
        "EURINR",
        "EURMXP",
        "EURO600",
        "EURO600-ESG",
        "EUROFIRST100",
        "EUROFIRST80",
        "EUROSTX-CORE",
        "EUROSTX-DJ",
        "EUROSTX-PRICE",
        "FANG",
        "FTSE100-DIV",
        "FTSEAFRICA40",
        "FTSECHINAA",
        "FTSECHINAA-CSOP",
        "FTSECHINAA-IS",
        "FTSETAIWAN",
        "GAS-PEN",
        "GBPINR",
        "GICS-EXCESS",
        "GILT2",
        "GILT5",
        "HANG-DIV",
        "HANGTECH",
        "HANGENT_mini",
        "HANGENT-GTR",
        "HANGENT-NTR",
        "HEAT-DEG-AMS",
        "HEAT-DEG-LON",
        "HEAT-DEG-NY",
        "HIBOR",
        "HOUSE-BO",
        "HOUSE-CG",
        "HOUSE-DC",
        "HOUSE-DN",
        "HOUSE-LA",
        "HOUSE-LV",
        "HOUSE-MI",
        "HOUSE-NY",
        "HOUSE-SD",
        "HOUSE-SF",
        "HSCEI-DIV",
        "HUF",
        "HUFEUR",
        "IND-BANK",
        "IND-FIN",
        "IPC",
        "IRON",
        "IRON-CME",
        "IRON-HK",
        "JPY-SGX-TITAN",
        "JPYINR",
        "KOSDAQ",
        "KOSPI_mini",
        "KOSPI300",
        "KR10",
        "KRW",
        "KRWJPY",
        "KRWUSD_mini",
        "LEAD_LME",
        "LIBOR1",
        "MARS-ARGUS",
        "MIB",
        "MIB_micro",
        "MIB_mini",
        "MIB-DIVI",
        "MID-DAX",
        "MILKWET",
        "MILLWHEAT",
        "MSCIASIAEXJP",
        "MSCIBRAZIL",
        "MSCICHINA",
        "MSCICHINANET",
        "MSCIEAFA",
        "MSCIEAFA-TOT",
        "MSCIEM",
        "MSCIEM-LIFFE",
        "MSCIEMASIA",
        "MSCIEURONET",
        "MSCIEURONET-ICE",
        "MSCIEUROPE",
        "MSCIEUROPE-ICE",
        "MSCIEUROPE-LIFFE",
        "MSCIINDO",
        "MSCIJAPAN",
        "MSCIJAPAN-LIFFE",
        "MSCILATIN",
        "MSCIPACIFIC",
        "MSCIPANEURO-LIFFE",
        "MSCIRUSSIA",
        "MSCITAIWAN",
        "MSCIUSA",
        "MSCIWORLD-MINVOL",
        "MSCIWORLDNET-EUR",
        "MSCIWORLDNET-ICE",
        "MSCIWORLDNET-USD",
        "MUMMY",
        "NASBIO-mini",
        "NICKEL_LME",
        "NIFTY",
        "NIFTY-IN",
        "NIKKEI400",
        "OAT5",
        "OMX-SWE",
        "OMXESG",
        "OMXSB",
        "PIPELINE",
        "PLZEUR",
        "PRECIOUS_small",
        "R1000_mini",
        "R1000GROWTH-mini",
        "RAPESEED",
        "RUBBER",
        "RUBBER-RSS",
        "RUSSELL-GROWTH",
        "RUSSELL-VALUE",
        "SING-REALESTATE",
        "SMALL75",
        "SMI-DIV",
        "SMIETF",
        "SOFR1",
        "SONIA",
        "SONIA1",
        "SP500-GROWTH",
        "SP500-VALUE",
        "SP600-SMALL",
        "SPI200",
        "SS-AIA-GROUP",
        "SS-ALIBABA-HLDS",
        "SS-ASML",
        "SS-ASS-GEN",
        "SS-BAIDU",
        "SS-BANK-CHINA",
        "SS-BOC-HONG-KONG",
        "SS-BUDWEISER-BREWING",
        "SS-BYD-CO",
        "SS-CHINA-CONSTR-BK",
        "SS-CHINA-MERCH-BANK",
        "SS-CHINA-MOBILE",
        "SS-CHINA-UNICOM-HK",
        "SS-CITIC-LTD",
        "SS-CK-HUTCHISON",
        "SS-CLP-HOLDINGS",
        "SS-CNOOC",
        "SS-DTE",
        "SS-ENEL-SPA",
        "SS-HDFC",
        "SS-HEINK",
        "SS-HIND-UNILV",
        "SS-HK-CHINA-GAS",
        "SS-HK-EXCH-CLEAR",
        "SS-HOUS-DEV-FIN",
        "SS-HSBC-HLDS",
        "SS-IBERDROLA",
        "SS-IND-COMM-BK-OF-CHINA",
        "SS-IND-DIS-TEXT",
        "SS-INFOSYS",
        "SS-JD-COM",
        "SS-KOTAK-BANK",
        "SS-LOREAL",
        "SS-MEITUAN-B",
        "SS-NETEASE",
        "SS-NONGFU",
        "SS-OVERSEA-CH-BK",
        "SS-PING-AN-INSURANCE",
        "SS-POWER-ASSETS-HLDS",
        "SS-RELIANCE",
        "SS-ROCHE",
        "SS-SING-TEL",
        "SS-SUN-HUNG-KAI",
        "SS-TATA",
        "SS-TENCENT-HLDS",
        "SS-THAI-BEV",
        "SS-TOTAL-ENERGIES",
        "SS-UNICREDIT-SPA",
        "SS-VW",
        "SS-WHARF-HLDS",
        "SS-WUXI-BIOLOGICS",
        "SS-XIAOMI",
        "SS-YES-BANK",
        "SS-ZUR-INSR",
        "SWISSLEAD",
        "TECDAX",
        "TECH60_small",
        "THB",
        "TOPIX_Large",
        "TOPIX30",
        "TSE60",
        "TSX",
        "UMBS-20",
        "UMBS-25",
        "UMBS-30",
        "UMBS-35",
        "UMBS-40",
        "UMBS-45",
        "UMBS-50",
        "URANIUM",
        "US10U",
        "US10Y_micro",
        "US10Y_small",
        "US20",
        "US20-new",
        "US2Y_micro",
        "US2Y_small",
        "US5Y_micro",
        "USD_small",
        "USDCAD_micro",
        "USDCHF_micro",
        "USDCNH-CME",
        "USDCNH-HK",
        "USDCNH-SGX_mini",
        "USDINR",
        "USDKRW",
        "USDMXP",
        "USIRS10",
        "USIRS10_ICE",
        "USIRS10ERIS",
        "USIRS12ERIS",
        "USIRS15ERIS",
        "USIRS2",
        "USIRS2_ICE",
        "USIRS20ERIS",
        "USIRS2ERIS",
        "USIRS30",
        "USIRS3ERIS",
        "USIRS4ERIS",
        "USIRS5",
        "USIRS5_ICE",
        "USIRS5ERIS",
        "USIRS5ERIS_SOFR",
        "USIRS7ERIS",
        "VHANG",
        "VOLQ",
        "WATER-CALI",
        "WHEAT-ASX",
        "WTI_small",
        "YENEUR",
        "YENEUR-ICE",
        "ZINC_LME",
    ]
    return instr_list


def robs_traded_instr():  # CNH
    return [
        "ALUMINIUM",
        "BRENT-LAST",
        "CAD10",
        "CHINAA-CON",
        "CANOLA",
        "CNH",
        "EU-AUTO",
        "EU-BANKS",
        "EU-BASIC",
        "EU-OIL",
        "EU-TECH",
        "FANG",
        "FTSECHINAA",
        "FTSETAIWAN",
        "GAS-PEN",
        "HANGENT_mini",
        "HANGTECH",
        "IRON",
        "KOSDAQ",
        "KR10",
        "MIB",
        "MILLWHEAT",
        "MSCIEAFA",
        "MSCITAIWAN",
        "MUMMY",
        "MXP",
        "NIKKEI",
        "SPI200",
        "TOPIX",
        "US10U",
        "US20",
        "US3",
        "YENEUR",
    ]

    # needs bc-utils config: CHINAA-CON, FANG, HANGENT_mini, HANGTECH, KOSDAQ, MIB,
    # MSCIEAFA, MSCITAIWAN, SPI200, US3


if __name__ == "__main__":
    print("Get initial price data from IB")
    # instrument_code = input("Instrument code? <return to abort> ")
    # if instrument_code == "":
    #     exit()

    instr_list = robs_traded_instr()
    # for instr in ["KR3", "MXP", "CANOLA"]:
    for instr in instr_list:
        seed_price_data_from_IB(instr, allow_expired=True)
